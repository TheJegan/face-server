/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Licensed under the MIT license.  See LICENSE file in the project root for full license information.
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var VSSInterfaces = require("./interfaces/common/VSSInterfaces");
var WorkItemTrackingInterfaces = require("./interfaces/WorkItemTrackingInterfaces");
var WorkItemTrackingApi = (function (_super) {
    __extends(WorkItemTrackingApi, _super);
    function WorkItemTrackingApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-WorkItemTracking-api');
    }
    /**
     * Creates an attachment.
     *
     * @param {NodeJS.ReadableStream} contentStream - Content to upload
     * @param {string} fileName
     * @param {string} uploadType
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.AttachmentReference
     */
    WorkItemTrackingApi.prototype.createAttachment = function (customHeaders, contentStream, fileName, uploadType, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            fileName: fileName,
            uploadType: uploadType,
        };
        customHeaders = customHeaders || {};
        customHeaders["Content-Type"] = "application/octet-stream";
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "e07b5fa4-1499-494d-a496-64b860fd64ff", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.AttachmentReference, responseIsCollection: false };
            _this.restClient.uploadStream('POST', url, apiVersion, contentStream, customHeaders, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns an attachment
     *
     * @param {string} id
     * @param {string} fileName
     * @param onResult callback function with the resulting ArrayBuffer
     */
    WorkItemTrackingApi.prototype.getAttachmentContent = function (id, fileName, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            fileName: fileName,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "e07b5fa4-1499-494d-a496-64b860fd64ff", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns an attachment
     *
     * @param {string} id
     * @param {string} fileName
     * @param onResult callback function with the resulting ArrayBuffer
     */
    WorkItemTrackingApi.prototype.getAttachmentZip = function (id, fileName, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            fileName: fileName,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "e07b5fa4-1499-494d-a496-64b860fd64ff", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} depth
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemClassificationNode[]
     */
    WorkItemTrackingApi.prototype.getRootNodes = function (project, depth, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            '$depth': depth,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a70579d1-f53a-48ee-a5be-7be8659023b9", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {WorkItemTrackingInterfaces.WorkItemClassificationNode} postedNode
     * @param {string} project - Project ID or project name
     * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup
     * @param {string} path
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemClassificationNode
     */
    WorkItemTrackingApi.prototype.createOrUpdateClassificationNode = function (postedNode, project, structureGroup, path, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            structureGroup: structureGroup,
            path: path
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "5a172953-1b41-49d3-840a-33f79c3ce89f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, postedNode, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup
     * @param {string} path
     * @param {number} reclassifyId
     * @param onResult callback function
     */
    WorkItemTrackingApi.prototype.deleteClassificationNode = function (project, structureGroup, path, reclassifyId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            structureGroup: structureGroup,
            path: path
        };
        var queryValues = {
            '$reclassifyId': reclassifyId,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "5a172953-1b41-49d3-840a-33f79c3ce89f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup
     * @param {string} path
     * @param {number} depth
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemClassificationNode
     */
    WorkItemTrackingApi.prototype.getClassificationNode = function (project, structureGroup, path, depth, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            structureGroup: structureGroup,
            path: path
        };
        var queryValues = {
            '$depth': depth,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "5a172953-1b41-49d3-840a-33f79c3ce89f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {WorkItemTrackingInterfaces.WorkItemClassificationNode} postedNode
     * @param {string} project - Project ID or project name
     * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup
     * @param {string} path
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemClassificationNode
     */
    WorkItemTrackingApi.prototype.updateClassificationNode = function (postedNode, project, structureGroup, path, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            structureGroup: structureGroup,
            path: path
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "5a172953-1b41-49d3-840a-33f79c3ce89f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, postedNode, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} field
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemField
     */
    WorkItemTrackingApi.prototype.getField = function (field, onResult) {
        var _this = this;
        var routeValues = {
            field: field
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemField, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemField[]
     */
    WorkItemTrackingApi.prototype.getFields = function (onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemField, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns history of all revision for a given work item ID
     *
     * @param {number} id
     * @param {number} top
     * @param {number} skip
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemHistory[]
     */
    WorkItemTrackingApi.prototype.getHistory = function (id, top, skip, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            '$top': top,
            '$skip': skip,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "f74eba29-47a1-4152-9381-84040aced527", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemHistory, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns the history value of particular revision
     *
     * @param {number} id
     * @param {number} revisionNumber
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemHistory
     */
    WorkItemTrackingApi.prototype.getHistoryById = function (id, revisionNumber, onResult) {
        var _this = this;
        var routeValues = {
            id: id,
            revisionNumber: revisionNumber
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "f74eba29-47a1-4152-9381-84040aced527", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemHistory, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Creates a query, or moves a query.
     *
     * @param {WorkItemTrackingInterfaces.QueryHierarchyItem} postedQuery - The query to create.
     * @param {string} project - Project ID or project name
     * @param {string} query - The parent path for the query to create.
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.QueryHierarchyItem
     */
    WorkItemTrackingApi.prototype.createQuery = function (postedQuery, project, query, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            query: query
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, postedQuery, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {string} query
     * @param onResult callback function
     */
    WorkItemTrackingApi.prototype.deleteQuery = function (project, query, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            query: query
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    /**
     * Retrieves all queries the user has access to in the current project
     *
     * @param {string} project - Project ID or project name
     * @param {WorkItemTrackingInterfaces.QueryExpand} expand
     * @param {number} depth
     * @param {boolean} includeDeleted
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.QueryHierarchyItem[]
     */
    WorkItemTrackingApi.prototype.getQueries = function (project, expand, depth, includeDeleted, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            '$expand': expand,
            '$depth': depth,
            '$includeDeleted': includeDeleted,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Retrieves a single query by project and either id or path
     *
     * @param {string} project - Project ID or project name
     * @param {string} query
     * @param {WorkItemTrackingInterfaces.QueryExpand} expand
     * @param {number} depth
     * @param {boolean} includeDeleted
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.QueryHierarchyItem
     */
    WorkItemTrackingApi.prototype.getQuery = function (project, query, expand, depth, includeDeleted, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            query: query
        };
        var queryValues = {
            '$expand': expand,
            '$depth': depth,
            '$includeDeleted': includeDeleted,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {WorkItemTrackingInterfaces.QueryHierarchyItem} queryUpdate
     * @param {string} project - Project ID or project name
     * @param {string} query
     * @param {boolean} undeleteDescendants
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.QueryHierarchyItem
     */
    WorkItemTrackingApi.prototype.updateQuery = function (queryUpdate, project, query, undeleteDescendants, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            query: query
        };
        var queryValues = {
            '$undeleteDescendants': undeleteDescendants,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a67d190c-c41f-424b-814d-0e906f659301", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, queryUpdate, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {number} id
     * @param {string} project - Project ID or project name
     * @param onResult callback function
     */
    WorkItemTrackingApi.prototype.destroyWorkItem = function (id, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            id: id
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    /**
     * @param {number} id
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemDelete
     */
    WorkItemTrackingApi.prototype.getDeletedWorkItem = function (id, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            id: id
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemDelete, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number[]} ids
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemDeleteReference[]
     */
    WorkItemTrackingApi.prototype.getDeletedWorkItems = function (project, ids, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            ids: ids && ids.join(","),
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemDeleteReference, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {WorkItemTrackingInterfaces.WorkItemDeleteUpdate} payload
     * @param {number} id
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemDelete
     */
    WorkItemTrackingApi.prototype.restoreWorkItem = function (payload, id, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            id: id
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "wit", "b70d8d39-926c-465e-b927-b1bf0e5ca0e0", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemDeleteUpdate, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemDelete, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, payload, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns a fully hydrated work item for the requested revision
     *
     * @param {number} id
     * @param {number} revisionNumber
     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItem
     */
    WorkItemTrackingApi.prototype.getRevision = function (id, revisionNumber, expand, onResult) {
        var _this = this;
        var routeValues = {
            id: id,
            revisionNumber: revisionNumber
        };
        var queryValues = {
            '$expand': expand,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a00c85a5-80fa-4565-99c3-bcd2181434bb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItem, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns the list of fully hydrated work item revisions, paged.
     *
     * @param {number} id
     * @param {number} top
     * @param {number} skip
     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItem[]
     */
    WorkItemTrackingApi.prototype.getRevisions = function (id, top, skip, expand, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            '$top': top,
            '$skip': skip,
            '$expand': expand,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a00c85a5-80fa-4565-99c3-bcd2181434bb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Validates the fields values.
     *
     * @param {WorkItemTrackingInterfaces.FieldsToEvaluate} ruleEngineInput
     * @param onResult callback function
     */
    WorkItemTrackingApi.prototype.evaluateRulesOnField = function (ruleEngineInput, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "wit", "1a3a1536-dca6-4509-b9c3-dd9bb2981506", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.FieldsToEvaluate, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, ruleEngineInput, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    /**
     * Returns a single update for a work item
     *
     * @param {number} id
     * @param {number} updateNumber
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemUpdate
     */
    WorkItemTrackingApi.prototype.getUpdate = function (id, updateNumber, onResult) {
        var _this = this;
        var routeValues = {
            id: id,
            updateNumber: updateNumber
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "6570bf97-d02c-4a91-8d93-3abe9895b1a9", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemUpdate, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns a the deltas between work item revisions
     *
     * @param {number} id
     * @param {number} top
     * @param {number} skip
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemUpdate[]
     */
    WorkItemTrackingApi.prototype.getUpdates = function (id, top, skip, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            '$top': top,
            '$skip': skip,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "6570bf97-d02c-4a91-8d93-3abe9895b1a9", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemUpdate, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Gets the results of the query.
     *
     * @param {WorkItemTrackingInterfaces.Wiql} wiql - The query containing the wiql.
     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation
     * @param {boolean} timePrecision
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemQueryResult
     */
    WorkItemTrackingApi.prototype.queryByWiql = function (wiql, teamContext, timePrecision, onResult) {
        var _this = this;
        var project = teamContext.projectId || teamContext.project;
        var team = teamContext.teamId || teamContext.team;
        var routeValues = {
            project: project,
            team: team
        };
        var queryValues = {
            timePrecision: timePrecision,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "1a9c53f7-f243-4447-b110-35ef023636e4", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.Wiql, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemQueryResult, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, wiql, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Gets the results of the query by id.
     *
     * @param {string} id - The query id.
     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation
     * @param {boolean} timePrecision
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemQueryResult
     */
    WorkItemTrackingApi.prototype.queryById = function (id, teamContext, timePrecision, onResult) {
        var _this = this;
        var project = teamContext.projectId || teamContext.project;
        var team = teamContext.teamId || teamContext.team;
        var routeValues = {
            project: project,
            team: team,
            id: id
        };
        var queryValues = {
            timePrecision: timePrecision,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "a02355f5-5f8a-4671-8e32-369d23aac83d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemQueryResult, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Get a batch of work item links
     *
     * @param {string} project - Project ID or project name
     * @param {string[]} types - A list of types to filter the results to specific work item types. Omit this parameter to get work item links of all work item types.
     * @param {string} continuationToken - Specifies the continuationToken to start the batch from. Omit this parameter to get the first batch of links.
     * @param {Date} startDateTime - Date/time to use as a starting point for link changes. Only link changes that occurred after that date/time will be returned. Cannot be used in conjunction with 'watermark' parameter.
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.ReportingWorkItemLinksBatch
     */
    WorkItemTrackingApi.prototype.getReportingLinks = function (project, types, continuationToken, startDateTime, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            types: types && types.join(","),
            continuationToken: continuationToken,
            startDateTime: startDateTime,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "b5b5b6d0-0308-40a1-b3f4-b9bb3c66878f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.ReportingWorkItemLinksBatch, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Gets the work item relation types.
     *
     * @param {string} relation
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemRelationType
     */
    WorkItemTrackingApi.prototype.getRelationType = function (relation, onResult) {
        var _this = this;
        var routeValues = {
            relation: relation
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "f5d33bc9-5b49-4a3c-a9bd-f3cd46dd2165", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemRelationType, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemRelationType[]
     */
    WorkItemTrackingApi.prototype.getRelationTypes = function (onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "f5d33bc9-5b49-4a3c-a9bd-f3cd46dd2165", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemRelationType, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Get a batch of work item revisions with the option of including deleted items
     *
     * @param {string} project - Project ID or project name
     * @param {string[]} fields - A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.
     * @param {string[]} types - A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.
     * @param {string} continuationToken - Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.
     * @param {Date} startDateTime - Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.
     * @param {boolean} includeIdentityRef - Return an identity reference instead of a string value for identity fields.
     * @param {boolean} includeDeleted - Specify if the deleted item should be returned.
     * @param {boolean} includeTagRef - Specify if the tag objects should be returned for System.Tags field.
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.ReportingWorkItemRevisionsBatch
     */
    WorkItemTrackingApi.prototype.readReportingRevisionsGet = function (project, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            fields: fields && fields.join(","),
            types: types && types.join(","),
            continuationToken: continuationToken,
            startDateTime: startDateTime,
            includeIdentityRef: includeIdentityRef,
            includeDeleted: includeDeleted,
            includeTagRef: includeTagRef,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "f828fe59-dd87-495d-a17c-7a8d6211ca6c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.ReportingWorkItemRevisionsBatch, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Get a batch of work item revisions
     *
     * @param {WorkItemTrackingInterfaces.ReportingWorkItemRevisionsFilter} filter - An object that contains request settings: field filter, type filter, identity format
     * @param {string} project - Project ID or project name
     * @param {string} continuationToken - Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.
     * @param {Date} startDateTime - Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.ReportingWorkItemRevisionsBatch
     */
    WorkItemTrackingApi.prototype.readReportingRevisionsPost = function (filter, project, continuationToken, startDateTime, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            continuationToken: continuationToken,
            startDateTime: startDateTime,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "f828fe59-dd87-495d-a17c-7a8d6211ca6c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.ReportingWorkItemRevisionsFilter, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.ReportingWorkItemRevisionsBatch, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, filter, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {number} id
     * @param {boolean} destroy
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemDelete
     */
    WorkItemTrackingApi.prototype.deleteWorkItem = function (id, destroy, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            destroy: destroy,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "72c7ddf8-2cdc-4f60-90cd-ab71c14a399b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemDelete, responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns a single work item
     *
     * @param {number} id
     * @param {string[]} fields
     * @param {Date} asOf
     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItem
     */
    WorkItemTrackingApi.prototype.getWorkItem = function (id, fields, asOf, expand, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            fields: fields && fields.join(","),
            asOf: asOf,
            '$expand': expand,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "72c7ddf8-2cdc-4f60-90cd-ab71c14a399b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItem, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns a list of work items
     *
     * @param {number[]} ids
     * @param {string[]} fields
     * @param {Date} asOf
     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItem[]
     */
    WorkItemTrackingApi.prototype.getWorkItems = function (ids, fields, asOf, expand, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            ids: ids && ids.join(","),
            fields: fields && fields.join(","),
            asOf: asOf,
            '$expand': expand,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "72c7ddf8-2cdc-4f60-90cd-ab71c14a399b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {VSSInterfaces.JsonPatchDocument} document
     * @param {number} id
     * @param {boolean} validateOnly
     * @param {boolean} bypassRules
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItem
     */
    WorkItemTrackingApi.prototype.updateWorkItem = function (customHeaders, document, id, validateOnly, bypassRules, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            validateOnly: validateOnly,
            bypassRules: bypassRules,
        };
        customHeaders = customHeaders || {};
        customHeaders["Content-Type"] = "application/json-patch+json";
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "72c7ddf8-2cdc-4f60-90cd-ab71c14a399b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: VSSInterfaces.TypeInfo.JsonPatchDocument, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItem, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, document, customHeaders, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {VSSInterfaces.JsonPatchDocument} document
     * @param {string} project - Project ID or project name
     * @param {string} type
     * @param {boolean} validateOnly
     * @param {boolean} bypassRules
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItem
     */
    WorkItemTrackingApi.prototype.createWorkItem = function (customHeaders, document, project, type, validateOnly, bypassRules, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            type: type
        };
        var queryValues = {
            validateOnly: validateOnly,
            bypassRules: bypassRules,
        };
        customHeaders = customHeaders || {};
        customHeaders["Content-Type"] = "application/json-patch+json";
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "62d3d110-0047-428c-ad3c-4fe872c91c74", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: VSSInterfaces.TypeInfo.JsonPatchDocument, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItem, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, document, customHeaders, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns a single work item from a template
     *
     * @param {string} project - Project ID or project name
     * @param {string} type
     * @param {string} fields
     * @param {Date} asOf
     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItem
     */
    WorkItemTrackingApi.prototype.getWorkItemTemplate = function (project, type, fields, asOf, expand, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            type: type
        };
        var queryValues = {
            fields: fields,
            asOf: asOf,
            '$expand': expand,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "62d3d110-0047-428c-ad3c-4fe872c91c74", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItem, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemTypeCategory[]
     */
    WorkItemTrackingApi.prototype.getWorkItemTypeCategories = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "9b9f5734-36c8-415e-ba67-f83b45c31408", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemTypeCategory, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns a the deltas between work item revisions
     *
     * @param {string} project - Project ID or project name
     * @param {string} category
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemTypeCategory
     */
    WorkItemTrackingApi.prototype.getWorkItemTypeCategory = function (project, category, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            category: category
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "9b9f5734-36c8-415e-ba67-f83b45c31408", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemTypeCategory, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns a the deltas between work item revisions
     *
     * @param {string} project - Project ID or project name
     * @param {string} type
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemType
     */
    WorkItemTrackingApi.prototype.getWorkItemType = function (project, type, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            type: type
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "7c8d7a76-4a09-43e8-b5df-bd792f4ac6aa", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemType, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemType[]
     */
    WorkItemTrackingApi.prototype.getWorkItemTypes = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "wit", "7c8d7a76-4a09-43e8-b5df-bd792f4ac6aa", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemType, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Returns the dependent fields for the corresponding workitem type and fieldname
     *
     * @param {string} project - Project ID or project name
     * @param {string} type
     * @param {string} field
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.FieldDependentRule
     */
    WorkItemTrackingApi.prototype.getDependentFields = function (project, type, field, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            type: type,
            field: field
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "wit", "bd293ce5-3d25-4192-8e67-e8092e879efb", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.FieldDependentRule, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Export work item type
     *
     * @param {string} project - Project ID or project name
     * @param {string} type
     * @param {boolean} exportGlobalLists
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.WorkItemTypeTemplate
     */
    WorkItemTrackingApi.prototype.exportWorkItemTypeDefinition = function (project, type, exportGlobalLists, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            type: type
        };
        var queryValues = {
            exportGlobalLists: exportGlobalLists,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "wit", "8637ac8b-5eb6-4f90-b3f7-4f2ff576a459", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemTypeTemplate, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * Add/updates a work item type
     *
     * @param {WorkItemTrackingInterfaces.WorkItemTypeTemplateUpdateModel} updateModel
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting WorkItemTrackingInterfaces.ProvisioningResult
     */
    WorkItemTrackingApi.prototype.updateWorkItemTypeDefinition = function (updateModel, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "wit", "8637ac8b-5eb6-4f90-b3f7-4f2ff576a459", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.WorkItemTypeTemplateUpdateModel, responseTypeMetadata: WorkItemTrackingInterfaces.TypeInfo.ProvisioningResult, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, updateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return WorkItemTrackingApi;
}(basem.ClientApiBase));
exports.WorkItemTrackingApi = WorkItemTrackingApi;
var QWorkItemTrackingApi = (function (_super) {
    __extends(QWorkItemTrackingApi, _super);
    function QWorkItemTrackingApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, WorkItemTrackingApi);
    }
    /**
    * Creates an attachment.
    *
    * @param {NodeJS.ReadableStream} contentStream - Content to upload
    * @param {string} fileName
    * @param {string} uploadType
    */
    QWorkItemTrackingApi.prototype.createAttachment = function (customHeaders, contentStream, fileName, uploadType) {
        var deferred = Q.defer();
        this.api.createAttachment(customHeaders, contentStream, fileName, uploadType, function (err, statusCode, attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(attachment);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns an attachment
    *
    * @param {string} id
    * @param {string} fileName
    */
    QWorkItemTrackingApi.prototype.getAttachmentContent = function (id, fileName) {
        var deferred = Q.defer();
        this.api.getAttachmentContent(id, fileName, function (err, statusCode, attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(attachment);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns an attachment
    *
    * @param {string} id
    * @param {string} fileName
    */
    QWorkItemTrackingApi.prototype.getAttachmentZip = function (id, fileName) {
        var deferred = Q.defer();
        this.api.getAttachmentZip(id, fileName, function (err, statusCode, attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(attachment);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} depth
    */
    QWorkItemTrackingApi.prototype.getRootNodes = function (project, depth) {
        var deferred = Q.defer();
        this.api.getRootNodes(project, depth, function (err, statusCode, classificationNodes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(classificationNodes);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {WorkItemTrackingInterfaces.WorkItemClassificationNode} postedNode
    * @param {string} project - Project ID or project name
    * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup
    * @param {string} path
    */
    QWorkItemTrackingApi.prototype.createOrUpdateClassificationNode = function (postedNode, project, structureGroup, path) {
        var deferred = Q.defer();
        this.api.createOrUpdateClassificationNode(postedNode, project, structureGroup, path, function (err, statusCode, classificationNode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(classificationNode);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup
    * @param {string} path
    * @param {number} reclassifyId
    */
    QWorkItemTrackingApi.prototype.deleteClassificationNode = function (project, structureGroup, path, reclassifyId) {
        var deferred = Q.defer();
        this.api.deleteClassificationNode(project, structureGroup, path, reclassifyId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup
    * @param {string} path
    * @param {number} depth
    */
    QWorkItemTrackingApi.prototype.getClassificationNode = function (project, structureGroup, path, depth) {
        var deferred = Q.defer();
        this.api.getClassificationNode(project, structureGroup, path, depth, function (err, statusCode, classificationNode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(classificationNode);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {WorkItemTrackingInterfaces.WorkItemClassificationNode} postedNode
    * @param {string} project - Project ID or project name
    * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup
    * @param {string} path
    */
    QWorkItemTrackingApi.prototype.updateClassificationNode = function (postedNode, project, structureGroup, path) {
        var deferred = Q.defer();
        this.api.updateClassificationNode(postedNode, project, structureGroup, path, function (err, statusCode, classificationNode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(classificationNode);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} field
    */
    QWorkItemTrackingApi.prototype.getField = function (field) {
        var deferred = Q.defer();
        this.api.getField(field, function (err, statusCode, field) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(field);
            }
        });
        return deferred.promise;
    };
    /**
    */
    QWorkItemTrackingApi.prototype.getFields = function () {
        var deferred = Q.defer();
        this.api.getFields(function (err, statusCode, fields) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(fields);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns history of all revision for a given work item ID
    *
    * @param {number} id
    * @param {number} top
    * @param {number} skip
    */
    QWorkItemTrackingApi.prototype.getHistory = function (id, top, skip) {
        var deferred = Q.defer();
        this.api.getHistory(id, top, skip, function (err, statusCode, history) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(history);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns the history value of particular revision
    *
    * @param {number} id
    * @param {number} revisionNumber
    */
    QWorkItemTrackingApi.prototype.getHistoryById = function (id, revisionNumber) {
        var deferred = Q.defer();
        this.api.getHistoryById(id, revisionNumber, function (err, statusCode, history) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(history);
            }
        });
        return deferred.promise;
    };
    /**
    * Creates a query, or moves a query.
    *
    * @param {WorkItemTrackingInterfaces.QueryHierarchyItem} postedQuery - The query to create.
    * @param {string} project - Project ID or project name
    * @param {string} query - The parent path for the query to create.
    */
    QWorkItemTrackingApi.prototype.createQuery = function (postedQuery, project, query) {
        var deferred = Q.defer();
        this.api.createQuery(postedQuery, project, query, function (err, statusCode, querie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(querie);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} query
    */
    QWorkItemTrackingApi.prototype.deleteQuery = function (project, query) {
        var deferred = Q.defer();
        this.api.deleteQuery(project, query, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    /**
    * Retrieves all queries the user has access to in the current project
    *
    * @param {string} project - Project ID or project name
    * @param {WorkItemTrackingInterfaces.QueryExpand} expand
    * @param {number} depth
    * @param {boolean} includeDeleted
    */
    QWorkItemTrackingApi.prototype.getQueries = function (project, expand, depth, includeDeleted) {
        var deferred = Q.defer();
        this.api.getQueries(project, expand, depth, includeDeleted, function (err, statusCode, queries) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(queries);
            }
        });
        return deferred.promise;
    };
    /**
    * Retrieves a single query by project and either id or path
    *
    * @param {string} project - Project ID or project name
    * @param {string} query
    * @param {WorkItemTrackingInterfaces.QueryExpand} expand
    * @param {number} depth
    * @param {boolean} includeDeleted
    */
    QWorkItemTrackingApi.prototype.getQuery = function (project, query, expand, depth, includeDeleted) {
        var deferred = Q.defer();
        this.api.getQuery(project, query, expand, depth, includeDeleted, function (err, statusCode, querie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(querie);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {WorkItemTrackingInterfaces.QueryHierarchyItem} queryUpdate
    * @param {string} project - Project ID or project name
    * @param {string} query
    * @param {boolean} undeleteDescendants
    */
    QWorkItemTrackingApi.prototype.updateQuery = function (queryUpdate, project, query, undeleteDescendants) {
        var deferred = Q.defer();
        this.api.updateQuery(queryUpdate, project, query, undeleteDescendants, function (err, statusCode, querie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(querie);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {number} id
    * @param {string} project - Project ID or project name
    */
    QWorkItemTrackingApi.prototype.destroyWorkItem = function (id, project) {
        var deferred = Q.defer();
        this.api.destroyWorkItem(id, project, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {number} id
    * @param {string} project - Project ID or project name
    */
    QWorkItemTrackingApi.prototype.getDeletedWorkItem = function (id, project) {
        var deferred = Q.defer();
        this.api.getDeletedWorkItem(id, project, function (err, statusCode, recyclebin) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(recyclebin);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number[]} ids
    */
    QWorkItemTrackingApi.prototype.getDeletedWorkItems = function (project, ids) {
        var deferred = Q.defer();
        this.api.getDeletedWorkItems(project, ids, function (err, statusCode, recyclebin) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(recyclebin);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {WorkItemTrackingInterfaces.WorkItemDeleteUpdate} payload
    * @param {number} id
    * @param {string} project - Project ID or project name
    */
    QWorkItemTrackingApi.prototype.restoreWorkItem = function (payload, id, project) {
        var deferred = Q.defer();
        this.api.restoreWorkItem(payload, id, project, function (err, statusCode, recyclebin) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(recyclebin);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns a fully hydrated work item for the requested revision
    *
    * @param {number} id
    * @param {number} revisionNumber
    * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
    */
    QWorkItemTrackingApi.prototype.getRevision = function (id, revisionNumber, expand) {
        var deferred = Q.defer();
        this.api.getRevision(id, revisionNumber, expand, function (err, statusCode, revision) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(revision);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns the list of fully hydrated work item revisions, paged.
    *
    * @param {number} id
    * @param {number} top
    * @param {number} skip
    * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
    */
    QWorkItemTrackingApi.prototype.getRevisions = function (id, top, skip, expand) {
        var deferred = Q.defer();
        this.api.getRevisions(id, top, skip, expand, function (err, statusCode, revisions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(revisions);
            }
        });
        return deferred.promise;
    };
    /**
    * Validates the fields values.
    *
    * @param {WorkItemTrackingInterfaces.FieldsToEvaluate} ruleEngineInput
    */
    QWorkItemTrackingApi.prototype.evaluateRulesOnField = function (ruleEngineInput) {
        var deferred = Q.defer();
        this.api.evaluateRulesOnField(ruleEngineInput, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns a single update for a work item
    *
    * @param {number} id
    * @param {number} updateNumber
    */
    QWorkItemTrackingApi.prototype.getUpdate = function (id, updateNumber) {
        var deferred = Q.defer();
        this.api.getUpdate(id, updateNumber, function (err, statusCode, update) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(update);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns a the deltas between work item revisions
    *
    * @param {number} id
    * @param {number} top
    * @param {number} skip
    */
    QWorkItemTrackingApi.prototype.getUpdates = function (id, top, skip) {
        var deferred = Q.defer();
        this.api.getUpdates(id, top, skip, function (err, statusCode, updates) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(updates);
            }
        });
        return deferred.promise;
    };
    /**
    * Gets the results of the query.
    *
    * @param {WorkItemTrackingInterfaces.Wiql} wiql - The query containing the wiql.
    * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation
    * @param {boolean} timePrecision
    */
    QWorkItemTrackingApi.prototype.queryByWiql = function (wiql, teamContext, timePrecision) {
        var deferred = Q.defer();
        this.api.queryByWiql(wiql, teamContext, timePrecision, function (err, statusCode, wiql) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(wiql);
            }
        });
        return deferred.promise;
    };
    /**
    * Gets the results of the query by id.
    *
    * @param {string} id - The query id.
    * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation
    * @param {boolean} timePrecision
    */
    QWorkItemTrackingApi.prototype.queryById = function (id, teamContext, timePrecision) {
        var deferred = Q.defer();
        this.api.queryById(id, teamContext, timePrecision, function (err, statusCode, wiql) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(wiql);
            }
        });
        return deferred.promise;
    };
    /**
    * Get a batch of work item links
    *
    * @param {string} project - Project ID or project name
    * @param {string[]} types - A list of types to filter the results to specific work item types. Omit this parameter to get work item links of all work item types.
    * @param {string} continuationToken - Specifies the continuationToken to start the batch from. Omit this parameter to get the first batch of links.
    * @param {Date} startDateTime - Date/time to use as a starting point for link changes. Only link changes that occurred after that date/time will be returned. Cannot be used in conjunction with 'watermark' parameter.
    */
    QWorkItemTrackingApi.prototype.getReportingLinks = function (project, types, continuationToken, startDateTime) {
        var deferred = Q.defer();
        this.api.getReportingLinks(project, types, continuationToken, startDateTime, function (err, statusCode, workItemLink) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemLink);
            }
        });
        return deferred.promise;
    };
    /**
    * Gets the work item relation types.
    *
    * @param {string} relation
    */
    QWorkItemTrackingApi.prototype.getRelationType = function (relation) {
        var deferred = Q.defer();
        this.api.getRelationType(relation, function (err, statusCode, workItemRelationType) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemRelationType);
            }
        });
        return deferred.promise;
    };
    /**
    */
    QWorkItemTrackingApi.prototype.getRelationTypes = function () {
        var deferred = Q.defer();
        this.api.getRelationTypes(function (err, statusCode, workItemRelationTypes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemRelationTypes);
            }
        });
        return deferred.promise;
    };
    /**
    * Get a batch of work item revisions with the option of including deleted items
    *
    * @param {string} project - Project ID or project name
    * @param {string[]} fields - A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.
    * @param {string[]} types - A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.
    * @param {string} continuationToken - Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.
    * @param {Date} startDateTime - Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.
    * @param {boolean} includeIdentityRef - Return an identity reference instead of a string value for identity fields.
    * @param {boolean} includeDeleted - Specify if the deleted item should be returned.
    * @param {boolean} includeTagRef - Specify if the tag objects should be returned for System.Tags field.
    */
    QWorkItemTrackingApi.prototype.readReportingRevisionsGet = function (project, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef) {
        var deferred = Q.defer();
        this.api.readReportingRevisionsGet(project, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef, function (err, statusCode, workItemRevision) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemRevision);
            }
        });
        return deferred.promise;
    };
    /**
    * Get a batch of work item revisions
    *
    * @param {WorkItemTrackingInterfaces.ReportingWorkItemRevisionsFilter} filter - An object that contains request settings: field filter, type filter, identity format
    * @param {string} project - Project ID or project name
    * @param {string} continuationToken - Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.
    * @param {Date} startDateTime - Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.
    */
    QWorkItemTrackingApi.prototype.readReportingRevisionsPost = function (filter, project, continuationToken, startDateTime) {
        var deferred = Q.defer();
        this.api.readReportingRevisionsPost(filter, project, continuationToken, startDateTime, function (err, statusCode, workItemRevision) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemRevision);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {number} id
    * @param {boolean} destroy
    */
    QWorkItemTrackingApi.prototype.deleteWorkItem = function (id, destroy) {
        var deferred = Q.defer();
        this.api.deleteWorkItem(id, destroy, function (err, statusCode, workItem) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItem);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns a single work item
    *
    * @param {number} id
    * @param {string[]} fields
    * @param {Date} asOf
    * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
    */
    QWorkItemTrackingApi.prototype.getWorkItem = function (id, fields, asOf, expand) {
        var deferred = Q.defer();
        this.api.getWorkItem(id, fields, asOf, expand, function (err, statusCode, workItem) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItem);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns a list of work items
    *
    * @param {number[]} ids
    * @param {string[]} fields
    * @param {Date} asOf
    * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
    */
    QWorkItemTrackingApi.prototype.getWorkItems = function (ids, fields, asOf, expand) {
        var deferred = Q.defer();
        this.api.getWorkItems(ids, fields, asOf, expand, function (err, statusCode, workItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItems);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {VSSInterfaces.JsonPatchDocument} document
    * @param {number} id
    * @param {boolean} validateOnly
    * @param {boolean} bypassRules
    */
    QWorkItemTrackingApi.prototype.updateWorkItem = function (customHeaders, document, id, validateOnly, bypassRules) {
        var deferred = Q.defer();
        this.api.updateWorkItem(customHeaders, document, id, validateOnly, bypassRules, function (err, statusCode, workItem) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItem);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {VSSInterfaces.JsonPatchDocument} document
    * @param {string} project - Project ID or project name
    * @param {string} type
    * @param {boolean} validateOnly
    * @param {boolean} bypassRules
    */
    QWorkItemTrackingApi.prototype.createWorkItem = function (customHeaders, document, project, type, validateOnly, bypassRules) {
        var deferred = Q.defer();
        this.api.createWorkItem(customHeaders, document, project, type, validateOnly, bypassRules, function (err, statusCode, workItem) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItem);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns a single work item from a template
    *
    * @param {string} project - Project ID or project name
    * @param {string} type
    * @param {string} fields
    * @param {Date} asOf
    * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand
    */
    QWorkItemTrackingApi.prototype.getWorkItemTemplate = function (project, type, fields, asOf, expand) {
        var deferred = Q.defer();
        this.api.getWorkItemTemplate(project, type, fields, asOf, expand, function (err, statusCode, workItem) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItem);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    */
    QWorkItemTrackingApi.prototype.getWorkItemTypeCategories = function (project) {
        var deferred = Q.defer();
        this.api.getWorkItemTypeCategories(project, function (err, statusCode, workItemTypeCategories) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemTypeCategories);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns a the deltas between work item revisions
    *
    * @param {string} project - Project ID or project name
    * @param {string} category
    */
    QWorkItemTrackingApi.prototype.getWorkItemTypeCategory = function (project, category) {
        var deferred = Q.defer();
        this.api.getWorkItemTypeCategory(project, category, function (err, statusCode, workItemTypeCategorie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemTypeCategorie);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns a the deltas between work item revisions
    *
    * @param {string} project - Project ID or project name
    * @param {string} type
    */
    QWorkItemTrackingApi.prototype.getWorkItemType = function (project, type) {
        var deferred = Q.defer();
        this.api.getWorkItemType(project, type, function (err, statusCode, workItemType) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemType);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    */
    QWorkItemTrackingApi.prototype.getWorkItemTypes = function (project) {
        var deferred = Q.defer();
        this.api.getWorkItemTypes(project, function (err, statusCode, workItemTypes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemTypes);
            }
        });
        return deferred.promise;
    };
    /**
    * Returns the dependent fields for the corresponding workitem type and fieldname
    *
    * @param {string} project - Project ID or project name
    * @param {string} type
    * @param {string} field
    */
    QWorkItemTrackingApi.prototype.getDependentFields = function (project, type, field) {
        var deferred = Q.defer();
        this.api.getDependentFields(project, type, field, function (err, statusCode, workItemTypesField) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemTypesField);
            }
        });
        return deferred.promise;
    };
    /**
    * Export work item type
    *
    * @param {string} project - Project ID or project name
    * @param {string} type
    * @param {boolean} exportGlobalLists
    */
    QWorkItemTrackingApi.prototype.exportWorkItemTypeDefinition = function (project, type, exportGlobalLists) {
        var deferred = Q.defer();
        this.api.exportWorkItemTypeDefinition(project, type, exportGlobalLists, function (err, statusCode, workItemTypeTemplate) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemTypeTemplate);
            }
        });
        return deferred.promise;
    };
    /**
    * Add/updates a work item type
    *
    * @param {WorkItemTrackingInterfaces.WorkItemTypeTemplateUpdateModel} updateModel
    * @param {string} project - Project ID or project name
    */
    QWorkItemTrackingApi.prototype.updateWorkItemTypeDefinition = function (updateModel, project) {
        var deferred = Q.defer();
        this.api.updateWorkItemTypeDefinition(updateModel, project, function (err, statusCode, workItemTypeTemplate) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workItemTypeTemplate);
            }
        });
        return deferred.promise;
    };
    return QWorkItemTrackingApi;
}(basem.QClientApiBase));
exports.QWorkItemTrackingApi = QWorkItemTrackingApi;
