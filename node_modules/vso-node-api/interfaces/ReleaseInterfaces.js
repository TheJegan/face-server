/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var FormInputInterfaces = require("../interfaces/common/FormInputInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (AgentArtifactType) {
    AgentArtifactType[AgentArtifactType["XamlBuild"] = 0] = "XamlBuild";
    AgentArtifactType[AgentArtifactType["Build"] = 1] = "Build";
    AgentArtifactType[AgentArtifactType["Jenkins"] = 2] = "Jenkins";
    AgentArtifactType[AgentArtifactType["FileShare"] = 3] = "FileShare";
    AgentArtifactType[AgentArtifactType["Nuget"] = 4] = "Nuget";
    AgentArtifactType[AgentArtifactType["TfsOnPrem"] = 5] = "TfsOnPrem";
    AgentArtifactType[AgentArtifactType["GitHub"] = 6] = "GitHub";
    AgentArtifactType[AgentArtifactType["TFGit"] = 7] = "TFGit";
    AgentArtifactType[AgentArtifactType["ExternalTfsBuild"] = 8] = "ExternalTfsBuild";
})(exports.AgentArtifactType || (exports.AgentArtifactType = {}));
var AgentArtifactType = exports.AgentArtifactType;
(function (ApprovalStatus) {
    ApprovalStatus[ApprovalStatus["Undefined"] = 0] = "Undefined";
    ApprovalStatus[ApprovalStatus["Pending"] = 1] = "Pending";
    ApprovalStatus[ApprovalStatus["Approved"] = 2] = "Approved";
    ApprovalStatus[ApprovalStatus["Rejected"] = 4] = "Rejected";
    ApprovalStatus[ApprovalStatus["Reassigned"] = 6] = "Reassigned";
    ApprovalStatus[ApprovalStatus["Canceled"] = 7] = "Canceled";
    ApprovalStatus[ApprovalStatus["Skipped"] = 8] = "Skipped";
})(exports.ApprovalStatus || (exports.ApprovalStatus = {}));
var ApprovalStatus = exports.ApprovalStatus;
(function (ApprovalType) {
    ApprovalType[ApprovalType["Undefined"] = 0] = "Undefined";
    ApprovalType[ApprovalType["PreDeploy"] = 1] = "PreDeploy";
    ApprovalType[ApprovalType["PostDeploy"] = 2] = "PostDeploy";
})(exports.ApprovalType || (exports.ApprovalType = {}));
var ApprovalType = exports.ApprovalType;
(function (AuditAction) {
    AuditAction[AuditAction["Add"] = 1] = "Add";
    AuditAction[AuditAction["Update"] = 2] = "Update";
    AuditAction[AuditAction["Delete"] = 3] = "Delete";
})(exports.AuditAction || (exports.AuditAction = {}));
var AuditAction = exports.AuditAction;
(function (ConditionType) {
    ConditionType[ConditionType["Undefined"] = 0] = "Undefined";
    ConditionType[ConditionType["Event"] = 1] = "Event";
    ConditionType[ConditionType["EnvironmentState"] = 2] = "EnvironmentState";
})(exports.ConditionType || (exports.ConditionType = {}));
var ConditionType = exports.ConditionType;
(function (EnvironmentStatus) {
    EnvironmentStatus[EnvironmentStatus["Undefined"] = 0] = "Undefined";
    EnvironmentStatus[EnvironmentStatus["NotStarted"] = 1] = "NotStarted";
    EnvironmentStatus[EnvironmentStatus["Pending"] = 2] = "Pending";
    EnvironmentStatus[EnvironmentStatus["Succeeded"] = 3] = "Succeeded";
    EnvironmentStatus[EnvironmentStatus["Rejected"] = 4] = "Rejected";
    EnvironmentStatus[EnvironmentStatus["InProgress"] = 5] = "InProgress";
    EnvironmentStatus[EnvironmentStatus["Canceled"] = 6] = "Canceled";
    EnvironmentStatus[EnvironmentStatus["Queued"] = 7] = "Queued";
})(exports.EnvironmentStatus || (exports.EnvironmentStatus = {}));
var EnvironmentStatus = exports.EnvironmentStatus;
(function (ReleaseDefinitionExpands) {
    ReleaseDefinitionExpands[ReleaseDefinitionExpands["None"] = 0] = "None";
    ReleaseDefinitionExpands[ReleaseDefinitionExpands["Environments"] = 2] = "Environments";
    ReleaseDefinitionExpands[ReleaseDefinitionExpands["Artifacts"] = 4] = "Artifacts";
})(exports.ReleaseDefinitionExpands || (exports.ReleaseDefinitionExpands = {}));
var ReleaseDefinitionExpands = exports.ReleaseDefinitionExpands;
(function (ReleaseExpands) {
    ReleaseExpands[ReleaseExpands["None"] = 0] = "None";
    ReleaseExpands[ReleaseExpands["Environments"] = 2] = "Environments";
    ReleaseExpands[ReleaseExpands["Artifacts"] = 4] = "Artifacts";
    ReleaseExpands[ReleaseExpands["Approvals"] = 8] = "Approvals";
})(exports.ReleaseExpands || (exports.ReleaseExpands = {}));
var ReleaseExpands = exports.ReleaseExpands;
(function (ReleaseQueryOrder) {
    ReleaseQueryOrder[ReleaseQueryOrder["Descending"] = 0] = "Descending";
    ReleaseQueryOrder[ReleaseQueryOrder["Ascending"] = 1] = "Ascending";
})(exports.ReleaseQueryOrder || (exports.ReleaseQueryOrder = {}));
var ReleaseQueryOrder = exports.ReleaseQueryOrder;
(function (ReleaseReason) {
    ReleaseReason[ReleaseReason["None"] = 0] = "None";
    ReleaseReason[ReleaseReason["Manual"] = 1] = "Manual";
    ReleaseReason[ReleaseReason["ContinuousIntegration"] = 2] = "ContinuousIntegration";
    ReleaseReason[ReleaseReason["Schedule"] = 3] = "Schedule";
})(exports.ReleaseReason || (exports.ReleaseReason = {}));
var ReleaseReason = exports.ReleaseReason;
(function (ReleaseStatus) {
    ReleaseStatus[ReleaseStatus["Undefined"] = 0] = "Undefined";
    ReleaseStatus[ReleaseStatus["Draft"] = 1] = "Draft";
    ReleaseStatus[ReleaseStatus["Abandoned"] = 2] = "Abandoned";
    ReleaseStatus[ReleaseStatus["Active"] = 3] = "Active";
})(exports.ReleaseStatus || (exports.ReleaseStatus = {}));
var ReleaseStatus = exports.ReleaseStatus;
(function (ReleaseTriggerType) {
    ReleaseTriggerType[ReleaseTriggerType["Undefined"] = 0] = "Undefined";
    ReleaseTriggerType[ReleaseTriggerType["ArtifactSource"] = 1] = "ArtifactSource";
    ReleaseTriggerType[ReleaseTriggerType["Schedule"] = 2] = "Schedule";
})(exports.ReleaseTriggerType || (exports.ReleaseTriggerType = {}));
var ReleaseTriggerType = exports.ReleaseTriggerType;
(function (ScheduleDays) {
    ScheduleDays[ScheduleDays["None"] = 0] = "None";
    ScheduleDays[ScheduleDays["Monday"] = 1] = "Monday";
    ScheduleDays[ScheduleDays["Tuesday"] = 2] = "Tuesday";
    ScheduleDays[ScheduleDays["Wednesday"] = 4] = "Wednesday";
    ScheduleDays[ScheduleDays["Thursday"] = 8] = "Thursday";
    ScheduleDays[ScheduleDays["Friday"] = 16] = "Friday";
    ScheduleDays[ScheduleDays["Saturday"] = 32] = "Saturday";
    ScheduleDays[ScheduleDays["Sunday"] = 64] = "Sunday";
    ScheduleDays[ScheduleDays["All"] = 127] = "All";
})(exports.ScheduleDays || (exports.ScheduleDays = {}));
var ScheduleDays = exports.ScheduleDays;
(function (TaskStatus) {
    TaskStatus[TaskStatus["Unknown"] = 0] = "Unknown";
    TaskStatus[TaskStatus["Pending"] = 1] = "Pending";
    TaskStatus[TaskStatus["InProgress"] = 2] = "InProgress";
    TaskStatus[TaskStatus["Success"] = 3] = "Success";
    TaskStatus[TaskStatus["Failure"] = 4] = "Failure";
    TaskStatus[TaskStatus["Canceled"] = 5] = "Canceled";
    TaskStatus[TaskStatus["Skipped"] = 6] = "Skipped";
})(exports.TaskStatus || (exports.TaskStatus = {}));
var TaskStatus = exports.TaskStatus;
exports.TypeInfo = {
    AgentArtifactDefinition: {
        fields: null
    },
    AgentArtifactType: {
        enumValues: {
            "xamlBuild": 0,
            "build": 1,
            "jenkins": 2,
            "fileShare": 3,
            "nuget": 4,
            "tfsOnPrem": 5,
            "gitHub": 6,
            "tFGit": 7,
            "externalTfsBuild": 8,
        }
    },
    ApprovalOptions: {
        fields: null
    },
    ApprovalPendingEvent: {
        fields: null
    },
    ApprovalStatus: {
        enumValues: {
            "undefined": 0,
            "pending": 1,
            "approved": 2,
            "rejected": 4,
            "reassigned": 6,
            "canceled": 7,
            "skipped": 8,
        }
    },
    ApprovalType: {
        enumValues: {
            "undefined": 0,
            "preDeploy": 1,
            "postDeploy": 2,
        }
    },
    Artifact: {
        fields: null
    },
    ArtifactInstanceData: {
        fields: null
    },
    ArtifactMetadata: {
        fields: null
    },
    ArtifactProvider: {
        fields: null
    },
    ArtifactSourceId: {
        fields: null
    },
    ArtifactSourceIdsQueryResult: {
        fields: null
    },
    ArtifactSourceReference: {
        fields: null
    },
    ArtifactTypeDefinition: {
        fields: null
    },
    ArtifactVersion: {
        fields: null
    },
    ArtifactVersionQueryResult: {
        fields: null
    },
    AuditAction: {
        enumValues: {
            "add": 1,
            "update": 2,
            "delete": 3,
        }
    },
    BuildVersion: {
        fields: null
    },
    Change: {
        fields: null
    },
    Condition: {
        fields: null
    },
    ConditionType: {
        enumValues: {
            "undefined": 0,
            "event": 1,
            "environmentState": 2,
        }
    },
    ConfigurationVariableValue: {
        fields: null
    },
    Consumer: {
        fields: null
    },
    DeploymentAttempt: {
        fields: null
    },
    EnvironmentExecutionPolicy: {
        fields: null
    },
    EnvironmentStatus: {
        enumValues: {
            "undefined": 0,
            "notStarted": 1,
            "pending": 2,
            "succeeded": 3,
            "rejected": 4,
            "inProgress": 5,
            "canceled": 6,
            "queued": 7,
        }
    },
    Issue: {
        fields: null
    },
    RealtimeReleaseEvent: {
        fields: null
    },
    Release: {
        fields: null
    },
    ReleaseApproval: {
        fields: null
    },
    ReleaseApprovalHistory: {
        fields: null
    },
    ReleaseArtifact: {
        fields: null
    },
    ReleaseDefinition: {
        fields: null
    },
    ReleaseDefinitionApprovals: {
        fields: null
    },
    ReleaseDefinitionApprovalStep: {
        fields: null
    },
    ReleaseDefinitionDeployStep: {
        fields: null
    },
    ReleaseDefinitionEnvironment: {
        fields: null
    },
    ReleaseDefinitionEnvironmentStep: {
        fields: null
    },
    ReleaseDefinitionEnvironmentSummary: {
        fields: null
    },
    ReleaseDefinitionEnvironmentTemplate: {
        fields: null
    },
    ReleaseDefinitionExpands: {
        enumValues: {
            "none": 0,
            "environments": 2,
            "artifacts": 4,
        }
    },
    ReleaseDefinitionRevision: {
        fields: null
    },
    ReleaseDefinitionSummary: {
        fields: null
    },
    ReleaseEnvironment: {
        fields: null
    },
    ReleaseEnvironmentCompletedEvent: {
        fields: null
    },
    ReleaseExpands: {
        enumValues: {
            "none": 0,
            "environments": 2,
            "artifacts": 4,
            "approvals": 8,
        }
    },
    ReleaseQueryOrder: {
        enumValues: {
            "descending": 0,
            "ascending": 1,
        }
    },
    ReleaseReason: {
        enumValues: {
            "none": 0,
            "manual": 1,
            "continuousIntegration": 2,
            "schedule": 3,
        }
    },
    ReleaseSchedule: {
        fields: null
    },
    ReleaseStartMetadata: {
        fields: null
    },
    ReleaseStatus: {
        enumValues: {
            "undefined": 0,
            "draft": 1,
            "abandoned": 2,
            "active": 3,
        }
    },
    ReleaseTask: {
        fields: null
    },
    ReleaseTaskLogUpdatedEvent: {
        fields: null
    },
    ReleaseTasksUpdatedEvent: {
        fields: null
    },
    ReleaseTrigger: {
        fields: null
    },
    ReleaseTriggerType: {
        enumValues: {
            "undefined": 0,
            "artifactSource": 1,
            "schedule": 2,
        }
    },
    ReleaseUpdatedEvent: {
        fields: null
    },
    ReleaseUpdateMetadata: {
        fields: null
    },
    ReleaseWorkItemRef: {
        fields: null
    },
    RetentionPolicy: {
        fields: null
    },
    ScheduleDays: {
        enumValues: {
            "none": 0,
            "monday": 1,
            "tuesday": 2,
            "wednesday": 4,
            "thursday": 8,
            "friday": 16,
            "saturday": 32,
            "sunday": 64,
            "all": 127,
        }
    },
    ShallowReference: {
        fields: null
    },
    SourceIdInput: {
        fields: null
    },
    TaskStatus: {
        enumValues: {
            "unknown": 0,
            "pending": 1,
            "inProgress": 2,
            "success": 3,
            "failure": 4,
            "canceled": 5,
            "skipped": 6,
        }
    },
    TimeZone: {
        fields: null
    },
    TimeZoneList: {
        fields: null
    },
    WorkflowTask: {
        fields: null
    },
};
exports.TypeInfo.AgentArtifactDefinition.fields = {
    artifactType: {
        enumType: exports.TypeInfo.AgentArtifactType
    },
};
exports.TypeInfo.ApprovalOptions.fields = {};
exports.TypeInfo.ApprovalPendingEvent.fields = {};
exports.TypeInfo.Artifact.fields = {
    definitionReference: {},
};
exports.TypeInfo.ArtifactInstanceData.fields = {};
exports.TypeInfo.ArtifactMetadata.fields = {
    instanceReference: {
        typeInfo: exports.TypeInfo.BuildVersion
    },
};
exports.TypeInfo.ArtifactProvider.fields = {};
exports.TypeInfo.ArtifactSourceId.fields = {
    sourceIdInputs: {
        isArray: true,
        typeInfo: exports.TypeInfo.SourceIdInput
    },
};
exports.TypeInfo.ArtifactSourceIdsQueryResult.fields = {
    artifactSourceIds: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactSourceId
    },
};
exports.TypeInfo.ArtifactSourceReference.fields = {};
exports.TypeInfo.ArtifactTypeDefinition.fields = {
    inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
    },
};
exports.TypeInfo.ArtifactVersion.fields = {
    versions: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildVersion
    },
};
exports.TypeInfo.ArtifactVersionQueryResult.fields = {
    artifactVersions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactVersion
    },
};
exports.TypeInfo.BuildVersion.fields = {};
exports.TypeInfo.Change.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    timestamp: {
        isDate: true,
    },
};
exports.TypeInfo.Condition.fields = {
    conditionType: {
        enumType: exports.TypeInfo.ConditionType
    },
};
exports.TypeInfo.ConfigurationVariableValue.fields = {};
exports.TypeInfo.Consumer.fields = {};
exports.TypeInfo.DeploymentAttempt.fields = {
    job: {
        typeInfo: exports.TypeInfo.ReleaseTask
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
    },
};
exports.TypeInfo.EnvironmentExecutionPolicy.fields = {};
exports.TypeInfo.Issue.fields = {};
exports.TypeInfo.RealtimeReleaseEvent.fields = {};
exports.TypeInfo.Release.fields = {
    artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.Artifact
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
    modifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    modifiedOn: {
        isDate: true,
    },
    reason: {
        enumType: exports.TypeInfo.ReleaseReason
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ReleaseStatus
    },
    variables: {},
};
exports.TypeInfo.ReleaseApproval.fields = {
    approvalType: {
        enumType: exports.TypeInfo.ApprovalType
    },
    approvedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    history: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApprovalHistory
    },
    modifiedOn: {
        isDate: true,
    },
    release: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ApprovalStatus
    },
};
exports.TypeInfo.ReleaseApprovalHistory.fields = {
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    modifiedOn: {
        isDate: true,
    },
};
exports.TypeInfo.ReleaseArtifact.fields = {
    artifactProvider: {
        typeInfo: exports.TypeInfo.ArtifactProvider
    },
};
exports.TypeInfo.ReleaseDefinition.fields = {
    artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.Artifact
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment
    },
    modifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    modifiedOn: {
        isDate: true,
    },
    retentionPolicy: {
        typeInfo: exports.TypeInfo.RetentionPolicy
    },
    triggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTrigger
    },
    variables: {},
};
exports.TypeInfo.ReleaseDefinitionApprovals.fields = {
    approvalOptions: {
        typeInfo: exports.TypeInfo.ApprovalOptions
    },
    approvals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovalStep
    },
};
exports.TypeInfo.ReleaseDefinitionApprovalStep.fields = {
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.ReleaseDefinitionDeployStep.fields = {
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    },
};
exports.TypeInfo.ReleaseDefinitionEnvironment.fields = {
    conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Condition
    },
    deployStep: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionDeployStep
    },
    executionPolicy: {
        typeInfo: exports.TypeInfo.EnvironmentExecutionPolicy
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    postDeployApprovals: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
    },
    preDeployApprovals: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
    },
    variables: {},
};
exports.TypeInfo.ReleaseDefinitionEnvironmentStep.fields = {};
exports.TypeInfo.ReleaseDefinitionEnvironmentSummary.fields = {
    lastReleases: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    },
};
exports.TypeInfo.ReleaseDefinitionEnvironmentTemplate.fields = {
    environment: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment
    },
};
exports.TypeInfo.ReleaseDefinitionRevision.fields = {
    changedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changedDate: {
        isDate: true,
    },
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    },
};
exports.TypeInfo.ReleaseDefinitionSummary.fields = {
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironmentSummary
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releases: {
        isArray: true,
        typeInfo: exports.TypeInfo.Release
    },
};
exports.TypeInfo.ReleaseEnvironment.fields = {
    conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Condition
    },
    createdOn: {
        isDate: true,
    },
    deploySteps: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentAttempt
    },
    modifiedOn: {
        isDate: true,
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    postApprovalsSnapshot: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
    },
    postDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    preApprovalsSnapshot: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
    },
    preDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    scheduledDeploymentTime: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.EnvironmentStatus
    },
    variables: {},
    workflowTasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    },
};
exports.TypeInfo.ReleaseEnvironmentCompletedEvent.fields = {
    environment: {
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
    releaseCreatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.ReleaseSchedule.fields = {
    daysToRelease: {
        enumType: exports.TypeInfo.ScheduleDays
    },
};
exports.TypeInfo.ReleaseStartMetadata.fields = {
    artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactMetadata
    },
    reason: {
        enumType: exports.TypeInfo.ReleaseReason
    },
};
exports.TypeInfo.ReleaseTask.fields = {
    dateEnded: {
        isDate: true,
    },
    dateStarted: {
        isDate: true,
    },
    issues: {
        isArray: true,
        typeInfo: exports.TypeInfo.Issue
    },
    status: {
        enumType: exports.TypeInfo.TaskStatus
    },
};
exports.TypeInfo.ReleaseTaskLogUpdatedEvent.fields = {};
exports.TypeInfo.ReleaseTasksUpdatedEvent.fields = {
    job: {
        typeInfo: exports.TypeInfo.ReleaseTask
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
    },
};
exports.TypeInfo.ReleaseTrigger.fields = {
    schedule: {
        typeInfo: exports.TypeInfo.ReleaseSchedule
    },
    triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
    },
};
exports.TypeInfo.ReleaseUpdatedEvent.fields = {
    release: {
        typeInfo: exports.TypeInfo.Release
    },
};
exports.TypeInfo.ReleaseUpdateMetadata.fields = {
    status: {
        enumType: exports.TypeInfo.ReleaseStatus
    },
};
exports.TypeInfo.ReleaseWorkItemRef.fields = {};
exports.TypeInfo.RetentionPolicy.fields = {};
exports.TypeInfo.ShallowReference.fields = {};
exports.TypeInfo.SourceIdInput.fields = {};
exports.TypeInfo.TimeZone.fields = {};
exports.TypeInfo.TimeZoneList.fields = {
    utcTimeZone: {
        typeInfo: exports.TypeInfo.TimeZone
    },
    validTimeZones: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimeZone
    },
};
exports.TypeInfo.WorkflowTask.fields = {};
