/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Licensed under the MIT license.  See LICENSE file in the project root for full license information.
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var FormInputInterfaces = require("./interfaces/common/FormInputInterfaces");
var ReleaseInterfaces = require("./interfaces/ReleaseInterfaces");
var ReleaseApi = (function (_super) {
    __extends(ReleaseApi, _super);
    function ReleaseApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Release-api');
    }
    /**
     * Returns the artifact details that automation agent requires
     *
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param onResult callback function with the resulting ReleaseInterfaces.AgentArtifactDefinition[]
     */
    ReleaseApi.prototype.getAgentArtifactDefinitions = function (project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "f2571c27-bf50-4938-b396-32d109ddef26", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.AgentArtifactDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {string} assignedToFilter
     * @param {ReleaseInterfaces.ApprovalStatus} statusFilter
     * @param {number[]} releaseIdsFilter
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseApproval[]
     */
    ReleaseApi.prototype.getApprovals = function (project, assignedToFilter, statusFilter, releaseIdsFilter, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            assignedToFilter: assignedToFilter,
            statusFilter: statusFilter,
            releaseIdsFilter: releaseIdsFilter && releaseIdsFilter.join(","),
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "b47c6458-e73b-47cb-a770-4df1e8813a91", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} approvalStepId
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseApproval
     */
    ReleaseApi.prototype.getApprovalHistory = function (project, approvalStepId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            approvalStepId: approvalStepId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "250c7158-852e-4130-a00f-a0cce9b72d05", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {ReleaseInterfaces.ReleaseApproval} approval
     * @param {string} project - Project ID or project name
     * @param {number} approvalId
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseApproval
     */
    ReleaseApi.prototype.updateReleaseApproval = function (approval, project, approvalId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            approvalId: approvalId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "9328e074-59fb-465a-89d9-b09c82ee5109", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, approval, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param {number} baseReleaseId
     * @param {number} top
     * @param onResult callback function with the resulting ReleaseInterfaces.Change[]
     */
    ReleaseApi.prototype.getReleaseChanges = function (project, releaseId, baseReleaseId, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        var queryValues = {
            baseReleaseId: baseReleaseId,
            '$top': top,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "8dcf9fe9-ca37-4113-8ee1-37928e98407c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.Change, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinition
     */
    ReleaseApi.prototype.createReleaseDefinition = function (releaseDefinition, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, releaseDefinition, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} definitionId
     * @param onResult callback function
     */
    ReleaseApi.prototype.deleteReleaseDefinition = function (project, definitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} definitionId
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinition
     */
    ReleaseApi.prototype.getReleaseDefinition = function (project, definitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {string} searchText
     * @param {number} artifactIdFilter
     * @param {ReleaseInterfaces.ReleaseDefinitionExpands} expand
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinition[]
     */
    ReleaseApi.prototype.getReleaseDefinitions = function (project, searchText, artifactIdFilter, expand, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            searchText: searchText,
            artifactIdFilter: artifactIdFilter,
            '$expand': expand,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {string} artifactType
     * @param {string} artifactSourceId
     * @param {ReleaseInterfaces.ReleaseDefinitionExpands} expand
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinition[]
     */
    ReleaseApi.prototype.getReleaseDefinitionsForArtifactSource = function (project, artifactType, artifactSourceId, expand, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            artifactType: artifactType,
            artifactSourceId: artifactSourceId,
            '$expand': expand,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinition
     */
    ReleaseApi.prototype.updateReleaseDefinition = function (releaseDefinition, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, releaseDefinition, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param {number} environmentId
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseEnvironment
     */
    ReleaseApi.prototype.getReleaseEnvironment = function (project, releaseId, environmentId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId,
            environmentId: environmentId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a7e426b1-03dc-48af-9dfe-c98bac612dcb", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseEnvironment, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {any} environmentUpdateData
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param {number} environmentId
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseEnvironment
     */
    ReleaseApi.prototype.updateReleaseEnvironment = function (environmentUpdateData, project, releaseId, environmentId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId,
            environmentId: environmentId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a7e426b1-03dc-48af-9dfe-c98bac612dcb", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseEnvironment, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, environmentUpdateData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {ReleaseInterfaces.ReleaseDefinitionEnvironmentTemplate} template
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinitionEnvironmentTemplate
     */
    ReleaseApi.prototype.createDefinitionEnvironmentTemplate = function (template, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, template, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {string} templateId
     * @param onResult callback function
     */
    ReleaseApi.prototype.deleteDefinitionEnvironmentTemplate = function (project, templateId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            templateId: templateId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {string} templateId
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinitionEnvironmentTemplate
     */
    ReleaseApi.prototype.getDefinitionEnvironmentTemplate = function (project, templateId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            templateId: templateId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinitionEnvironmentTemplate[]
     */
    ReleaseApi.prototype.listDefinitionEnvironmentTemplates = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {FormInputInterfaces.InputValuesQuery} query
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting FormInputInterfaces.InputValuesQuery
     */
    ReleaseApi.prototype.getInputValues = function (query, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "71dd499b-317d-45ea-9134-140ea1932b5e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: FormInputInterfaces.TypeInfo.InputValuesQuery, responseTypeMetadata: FormInputInterfaces.TypeInfo.InputValuesQuery, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, query, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param onResult callback function with the resulting ArrayBuffer
     */
    ReleaseApi.prototype.getLogs = function (project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "c37fbab5-214b-48e4-a55b-cb6b4f6e4038", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param {number} environmentId
     * @param {number} taskId
     * @param {number} attemptId
     * @param onResult callback function with the resulting string
     */
    ReleaseApi.prototype.getLog = function (project, releaseId, environmentId, taskId, attemptId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId,
            environmentId: environmentId,
            taskId: taskId
        };
        var queryValues = {
            attemptId: attemptId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "e71ba1ed-c0a4-4a28-a61f-2dd5f68cf3fd", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "text/plain", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {ReleaseInterfaces.ReleaseStartMetadata} releaseStartMetadata
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting ReleaseInterfaces.Release
     */
    ReleaseApi.prototype.createRelease = function (releaseStartMetadata, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseStartMetadata, responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, releaseStartMetadata, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param onResult callback function
     */
    ReleaseApi.prototype.deleteRelease = function (project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param {boolean} includeAllApprovals
     * @param onResult callback function with the resulting ReleaseInterfaces.Release
     */
    ReleaseApi.prototype.getRelease = function (project, releaseId, includeAllApprovals, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        var queryValues = {
            includeAllApprovals: includeAllApprovals,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} definitionId
     * @param {number} releaseCount
     * @param {boolean} includeArtifact
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinitionSummary
     */
    ReleaseApi.prototype.getReleaseDefinitionSummary = function (project, definitionId, releaseCount, includeArtifact, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            definitionId: definitionId,
            releaseCount: releaseCount,
            includeArtifact: includeArtifact,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionSummary, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} definitionId
     * @param {number} definitionEnvironmentId
     * @param {string} searchText
     * @param {string} createdBy
     * @param {ReleaseInterfaces.ReleaseStatus} statusFilter
     * @param {Date} minCreatedTime
     * @param {Date} maxCreatedTime
     * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder
     * @param {number} top
     * @param {number} continuationToken
     * @param {ReleaseInterfaces.ReleaseExpands} expand
     * @param {string} artifactTypeId
     * @param {number} artifactSourceId
     * @param {string} artifactVersionId
     * @param onResult callback function with the resulting ReleaseInterfaces.Release[]
     */
    ReleaseApi.prototype.getReleases = function (project, definitionId, definitionEnvironmentId, searchText, createdBy, statusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, expand, artifactTypeId, artifactSourceId, artifactVersionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            definitionId: definitionId,
            definitionEnvironmentId: definitionEnvironmentId,
            searchText: searchText,
            createdBy: createdBy,
            statusFilter: statusFilter,
            minCreatedTime: minCreatedTime,
            maxCreatedTime: maxCreatedTime,
            queryOrder: queryOrder,
            '$top': top,
            continuationToken: continuationToken,
            '$expand': expand,
            artifactTypeId: artifactTypeId,
            artifactSourceId: artifactSourceId,
            artifactVersionId: artifactVersionId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {ReleaseInterfaces.Release} release
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param onResult callback function with the resulting ReleaseInterfaces.Release
     */
    ReleaseApi.prototype.updateRelease = function (release, project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, release, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {ReleaseInterfaces.ReleaseUpdateMetadata} releaseUpdateMetadata
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param onResult callback function with the resulting ReleaseInterfaces.Release
     */
    ReleaseApi.prototype.updateReleaseResource = function (releaseUpdateMetadata, project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseUpdateMetadata, responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, releaseUpdateMetadata, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} definitionId
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseDefinitionRevision[]
     */
    ReleaseApi.prototype.getReleaseDefinitionHistory = function (project, definitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "258b82e0-9d41-43f3-86d6-fef14ddd44bc", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionRevision, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} definitionId
     * @param {number} revision
     * @param onResult callback function with the resulting string
     */
    ReleaseApi.prototype.getReleaseDefinitionRevision = function (project, definitionId, revision, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId,
            revision: revision
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "258b82e0-9d41-43f3-86d6-fef14ddd44bc", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "text/plain", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {string} typeId
     * @param onResult callback function with the resulting ReleaseInterfaces.ArtifactSourceIdsQueryResult
     */
    ReleaseApi.prototype.getArtifactsSources = function (project, typeId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            typeId: typeId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "a9c09fe4-901e-4b2e-b05d-9888ad883ae9", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ArtifactSourceIdsQueryResult, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param {number} environmentId
     * @param {number} attemptId
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseTask[]
     */
    ReleaseApi.prototype.getTasks = function (project, releaseId, environmentId, attemptId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId,
            environmentId: environmentId
        };
        var queryValues = {
            attemptId: attemptId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "36b276e0-3c70-4320-a63c-1a2e1466a0d1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseTask, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting ReleaseInterfaces.ArtifactTypeDefinition[]
     */
    ReleaseApi.prototype.getArtifactTypeDefinitions = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "8efc2a3c-1fc8-4f6d-9822-75e98cecb48f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ArtifactTypeDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseDefinitionId
     * @param onResult callback function with the resulting ReleaseInterfaces.ArtifactVersionQueryResult
     */
    ReleaseApi.prototype.getArtifactVersions = function (project, releaseDefinitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            releaseDefinitionId: releaseDefinitionId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "30fc787e-a9e0-4a07-9fbc-3e903aa051d2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ArtifactVersionQueryResult, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {ReleaseInterfaces.Artifact[]} artifacts
     * @param {string} project - Project ID or project name
     * @param onResult callback function with the resulting ReleaseInterfaces.ArtifactVersionQueryResult
     */
    ReleaseApi.prototype.getArtifactVersionsForSources = function (artifacts, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "30fc787e-a9e0-4a07-9fbc-3e903aa051d2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.Artifact, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ArtifactVersionQueryResult, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, artifacts, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    /**
     * @param {string} project - Project ID or project name
     * @param {number} releaseId
     * @param {number} baseReleaseId
     * @param {number} top
     * @param onResult callback function with the resulting ReleaseInterfaces.ReleaseWorkItemRef[]
     */
    ReleaseApi.prototype.getReleaseWorkItemsRefs = function (project, releaseId, baseReleaseId, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        var queryValues = {
            baseReleaseId: baseReleaseId,
            '$top': top,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Release", "4f165cc0-875c-4768-b148-f12f78769fab", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseWorkItemRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return ReleaseApi;
}(basem.ClientApiBase));
exports.ReleaseApi = ReleaseApi;
var QReleaseApi = (function (_super) {
    __extends(QReleaseApi, _super);
    function QReleaseApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, ReleaseApi);
    }
    /**
    * Returns the artifact details that automation agent requires
    *
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    QReleaseApi.prototype.getAgentArtifactDefinitions = function (project, releaseId) {
        var deferred = Q.defer();
        this.api.getAgentArtifactDefinitions(project, releaseId, function (err, statusCode, agentartifacts) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(agentartifacts);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} assignedToFilter
    * @param {ReleaseInterfaces.ApprovalStatus} statusFilter
    * @param {number[]} releaseIdsFilter
    */
    QReleaseApi.prototype.getApprovals = function (project, assignedToFilter, statusFilter, releaseIdsFilter) {
        var deferred = Q.defer();
        this.api.getApprovals(project, assignedToFilter, statusFilter, releaseIdsFilter, function (err, statusCode, approvals) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(approvals);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} approvalStepId
    */
    QReleaseApi.prototype.getApprovalHistory = function (project, approvalStepId) {
        var deferred = Q.defer();
        this.api.getApprovalHistory(project, approvalStepId, function (err, statusCode, approval) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(approval);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {ReleaseInterfaces.ReleaseApproval} approval
    * @param {string} project - Project ID or project name
    * @param {number} approvalId
    */
    QReleaseApi.prototype.updateReleaseApproval = function (approval, project, approvalId) {
        var deferred = Q.defer();
        this.api.updateReleaseApproval(approval, project, approvalId, function (err, statusCode, approval) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(approval);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} baseReleaseId
    * @param {number} top
    */
    QReleaseApi.prototype.getReleaseChanges = function (project, releaseId, baseReleaseId, top) {
        var deferred = Q.defer();
        this.api.getReleaseChanges(project, releaseId, baseReleaseId, top, function (err, statusCode, changes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(changes);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition
    * @param {string} project - Project ID or project name
    */
    QReleaseApi.prototype.createReleaseDefinition = function (releaseDefinition, project) {
        var deferred = Q.defer();
        this.api.createReleaseDefinition(releaseDefinition, project, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    */
    QReleaseApi.prototype.deleteReleaseDefinition = function (project, definitionId) {
        var deferred = Q.defer();
        this.api.deleteReleaseDefinition(project, definitionId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    */
    QReleaseApi.prototype.getReleaseDefinition = function (project, definitionId) {
        var deferred = Q.defer();
        this.api.getReleaseDefinition(project, definitionId, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} searchText
    * @param {number} artifactIdFilter
    * @param {ReleaseInterfaces.ReleaseDefinitionExpands} expand
    */
    QReleaseApi.prototype.getReleaseDefinitions = function (project, searchText, artifactIdFilter, expand) {
        var deferred = Q.defer();
        this.api.getReleaseDefinitions(project, searchText, artifactIdFilter, expand, function (err, statusCode, definitions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definitions);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} artifactType
    * @param {string} artifactSourceId
    * @param {ReleaseInterfaces.ReleaseDefinitionExpands} expand
    */
    QReleaseApi.prototype.getReleaseDefinitionsForArtifactSource = function (project, artifactType, artifactSourceId, expand) {
        var deferred = Q.defer();
        this.api.getReleaseDefinitionsForArtifactSource(project, artifactType, artifactSourceId, expand, function (err, statusCode, definitions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definitions);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition
    * @param {string} project - Project ID or project name
    */
    QReleaseApi.prototype.updateReleaseDefinition = function (releaseDefinition, project) {
        var deferred = Q.defer();
        this.api.updateReleaseDefinition(releaseDefinition, project, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    */
    QReleaseApi.prototype.getReleaseEnvironment = function (project, releaseId, environmentId) {
        var deferred = Q.defer();
        this.api.getReleaseEnvironment(project, releaseId, environmentId, function (err, statusCode, environment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(environment);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {any} environmentUpdateData
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    */
    QReleaseApi.prototype.updateReleaseEnvironment = function (environmentUpdateData, project, releaseId, environmentId) {
        var deferred = Q.defer();
        this.api.updateReleaseEnvironment(environmentUpdateData, project, releaseId, environmentId, function (err, statusCode, environment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(environment);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {ReleaseInterfaces.ReleaseDefinitionEnvironmentTemplate} template
    * @param {string} project - Project ID or project name
    */
    QReleaseApi.prototype.createDefinitionEnvironmentTemplate = function (template, project) {
        var deferred = Q.defer();
        this.api.createDefinitionEnvironmentTemplate(template, project, function (err, statusCode, environmenttemplate) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(environmenttemplate);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} templateId
    */
    QReleaseApi.prototype.deleteDefinitionEnvironmentTemplate = function (project, templateId) {
        var deferred = Q.defer();
        this.api.deleteDefinitionEnvironmentTemplate(project, templateId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} templateId
    */
    QReleaseApi.prototype.getDefinitionEnvironmentTemplate = function (project, templateId) {
        var deferred = Q.defer();
        this.api.getDefinitionEnvironmentTemplate(project, templateId, function (err, statusCode, environmenttemplate) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(environmenttemplate);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    */
    QReleaseApi.prototype.listDefinitionEnvironmentTemplates = function (project) {
        var deferred = Q.defer();
        this.api.listDefinitionEnvironmentTemplates(project, function (err, statusCode, environmenttemplates) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(environmenttemplates);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {FormInputInterfaces.InputValuesQuery} query
    * @param {string} project - Project ID or project name
    */
    QReleaseApi.prototype.getInputValues = function (query, project) {
        var deferred = Q.defer();
        this.api.getInputValues(query, project, function (err, statusCode, inputvaluesquery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(inputvaluesquery);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    QReleaseApi.prototype.getLogs = function (project, releaseId) {
        var deferred = Q.defer();
        this.api.getLogs(project, releaseId, function (err, statusCode, log) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(log);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    * @param {number} taskId
    * @param {number} attemptId
    */
    QReleaseApi.prototype.getLog = function (project, releaseId, environmentId, taskId, attemptId) {
        var deferred = Q.defer();
        this.api.getLog(project, releaseId, environmentId, taskId, attemptId, function (err, statusCode, log) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(log);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {ReleaseInterfaces.ReleaseStartMetadata} releaseStartMetadata
    * @param {string} project - Project ID or project name
    */
    QReleaseApi.prototype.createRelease = function (releaseStartMetadata, project) {
        var deferred = Q.defer();
        this.api.createRelease(releaseStartMetadata, project, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    QReleaseApi.prototype.deleteRelease = function (project, releaseId) {
        var deferred = Q.defer();
        this.api.deleteRelease(project, releaseId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {boolean} includeAllApprovals
    */
    QReleaseApi.prototype.getRelease = function (project, releaseId, includeAllApprovals) {
        var deferred = Q.defer();
        this.api.getRelease(project, releaseId, includeAllApprovals, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    * @param {number} releaseCount
    * @param {boolean} includeArtifact
    */
    QReleaseApi.prototype.getReleaseDefinitionSummary = function (project, definitionId, releaseCount, includeArtifact) {
        var deferred = Q.defer();
        this.api.getReleaseDefinitionSummary(project, definitionId, releaseCount, includeArtifact, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    * @param {number} definitionEnvironmentId
    * @param {string} searchText
    * @param {string} createdBy
    * @param {ReleaseInterfaces.ReleaseStatus} statusFilter
    * @param {Date} minCreatedTime
    * @param {Date} maxCreatedTime
    * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder
    * @param {number} top
    * @param {number} continuationToken
    * @param {ReleaseInterfaces.ReleaseExpands} expand
    * @param {string} artifactTypeId
    * @param {number} artifactSourceId
    * @param {string} artifactVersionId
    */
    QReleaseApi.prototype.getReleases = function (project, definitionId, definitionEnvironmentId, searchText, createdBy, statusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, expand, artifactTypeId, artifactSourceId, artifactVersionId) {
        var deferred = Q.defer();
        this.api.getReleases(project, definitionId, definitionEnvironmentId, searchText, createdBy, statusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, expand, artifactTypeId, artifactSourceId, artifactVersionId, function (err, statusCode, releases) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(releases);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {ReleaseInterfaces.Release} release
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    QReleaseApi.prototype.updateRelease = function (release, project, releaseId) {
        var deferred = Q.defer();
        this.api.updateRelease(release, project, releaseId, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {ReleaseInterfaces.ReleaseUpdateMetadata} releaseUpdateMetadata
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    QReleaseApi.prototype.updateReleaseResource = function (releaseUpdateMetadata, project, releaseId) {
        var deferred = Q.defer();
        this.api.updateReleaseResource(releaseUpdateMetadata, project, releaseId, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    */
    QReleaseApi.prototype.getReleaseDefinitionHistory = function (project, definitionId) {
        var deferred = Q.defer();
        this.api.getReleaseDefinitionHistory(project, definitionId, function (err, statusCode, revisions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(revisions);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    * @param {number} revision
    */
    QReleaseApi.prototype.getReleaseDefinitionRevision = function (project, definitionId, revision) {
        var deferred = Q.defer();
        this.api.getReleaseDefinitionRevision(project, definitionId, revision, function (err, statusCode, revision) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(revision);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} typeId
    */
    QReleaseApi.prototype.getArtifactsSources = function (project, typeId) {
        var deferred = Q.defer();
        this.api.getArtifactsSources(project, typeId, function (err, statusCode, source) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(source);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    * @param {number} attemptId
    */
    QReleaseApi.prototype.getTasks = function (project, releaseId, environmentId, attemptId) {
        var deferred = Q.defer();
        this.api.getTasks(project, releaseId, environmentId, attemptId, function (err, statusCode, tasks) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(tasks);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    */
    QReleaseApi.prototype.getArtifactTypeDefinitions = function (project) {
        var deferred = Q.defer();
        this.api.getArtifactTypeDefinitions(project, function (err, statusCode, types) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(types);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseDefinitionId
    */
    QReleaseApi.prototype.getArtifactVersions = function (project, releaseDefinitionId) {
        var deferred = Q.defer();
        this.api.getArtifactVersions(project, releaseDefinitionId, function (err, statusCode, version) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(version);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {ReleaseInterfaces.Artifact[]} artifacts
    * @param {string} project - Project ID or project name
    */
    QReleaseApi.prototype.getArtifactVersionsForSources = function (artifacts, project) {
        var deferred = Q.defer();
        this.api.getArtifactVersionsForSources(artifacts, project, function (err, statusCode, version) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(version);
            }
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} baseReleaseId
    * @param {number} top
    */
    QReleaseApi.prototype.getReleaseWorkItemsRefs = function (project, releaseId, baseReleaseId, top) {
        var deferred = Q.defer();
        this.api.getReleaseWorkItemsRefs(project, releaseId, baseReleaseId, top, function (err, statusCode, workitems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workitems);
            }
        });
        return deferred.promise;
    };
    return QReleaseApi;
}(basem.QClientApiBase));
exports.QReleaseApi = QReleaseApi;
